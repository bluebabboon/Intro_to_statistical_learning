paste("ldkf",3,"kdkd",sep = "")
arbot
paste(names(arbot)[2],"d")
names(arbot)
names(arbot)[0]
names(arbot)[1]
model_creator_simple_lm = function (data_input,index){
# attaching the names of given dataframe
attach(data_input)
# Creating 4 lists ,for storing model,its names and summary,its names
modellist = list()
summarylist = list()
modellistnames = list()
summarylistnames = list()
newdata = data_input[,-index]
count = 1
# Starting the loop to record every model
for(i in 1:length(data_input[,-index])){
tempmodel = lm(data_input[,index]~newdata[,count])
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
modellistnames[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarylistnames[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count=count+1
}
names(modellist) = modellistnames
names(summarylist) = summarylistnames
Model_and_summary = list(Allmodels = modellist,Allsummaries = summarylist)
}
model_creator_simple_lm(data_boston,1)
model_creator_simple_lm = function (data_input,index){
# attaching the names of given dataframe
attach(data_input)
# Creating 4 lists ,for storing model,its names and summary,its names
modellist = list()
summarylist = list()
modellistnames = list()
summarylistnames = list()
newdata = data_input[,-index]
count = 1
# Starting the loop to record every model
for(i in 1:length(data_input[,-index])){
tempmodel = lm(data_input[,index]~newdata[,count])
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
modellistnames[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarylistnames[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count=count+1
}
names(modellist) = modellistnames
names(summarylist) = summarylistnames
Model_and_summary = list(Allmodels = modellist,Allsummaries = summarylist)
Model_and_summary
}
model_creator_simple_lm(data_boston,1)
arbot = model_creator_simple_lm(data_boston,1)
names(arbot)
arbot["Allmodels"]
?lm
summary(arbot["Allmodels"]$zn_Model1)
summary(arbot["Allmodels"][1])
summary(arbot["Allmodels"][[1]])
summary(arbot["Allmodels"][[1]][[1]])
library(MASS)
data_boston = Boston
names(Boston)
data_boston = na.fail(data_boston)
str(data_boston)
attach(data_boston)
model1 = lm(crim~zn)
model1_summary = summary(model1)
model1_summary$coefficients[,"Pr(>|t|)"][2]
model_creator_simple_lm = function (data_input,index){
# attaching the names of given dataframe
attach(data_input)
# Creating 4 lists ,for storing model,its names and summary,its names
modellist = list()
summarylist = list()
modellistnames = list()
summarylistnames = list()
newdata = data_input[,-index]
count = 1
# Starting the loop to record every model
for(i in 1:length(data_input[,-index])){
tempmodel = lm(data_input[,index]~newdata[,count])
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
modellistnames[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarylistnames[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count=count+1
}
names(modellist) = modellistnames
names(summarylist) = summarylistnames
Model_and_summary = list(Allmodels = modellist,Allsummaries = summarylist)
Model_and_summary
}
library(MASS)
data_boston = Boston
names(Boston)
data_boston = na.fail(data_boston)
str(data_boston)
attach(data_boston)
model1 = lm(crim~zn)
model1_summary = summary(model1)
model1_summary$coefficients[,"Pr(>|t|)"][2]
model_creator_simple_lm = function (data_input,index){
# attaching the names of given dataframe
attach(data_input)
# Creating 4 lists ,for storing model,its names and summary,its names
modellist = list()
summarylist = list()
modellistnames = list()
summarylistnames = list()
newdata = data_input[,-index]
count = 1
# Starting the loop to record every model
for(i in 1:length(data_input[,-index])){
tempmodel = lm(data_input[,index]~newdata[,count])
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
modellistnames[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarylistnames[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count=count+1
}
names(modellist) = modellistnames
names(summarylist) = summarylistnames
Model_and_summary = list(Allmodels = modellist,Allsummaries = summarylist)
Model_and_summary
}
model_creator_simple_lm = function (data_input,index,onlymodel = T){
# attaching the names of given dataframe
attach(data_input)
# Creating 4 lists ,for storing model,its names and summary,its names
modellist = list()
summarylist = list()
modellistnames = list()
summarylistnames = list()
newdata = data_input[,-index]
count = 1
# Starting the loop to record every model
for(i in 1:length(data_input[,-index])){
tempmodel = lm(data_input[,index]~newdata[,count])
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
modellistnames[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarylistnames[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count=count+1
}
names(modellist) = modellistnames
names(summarylist) = summarylistnames
Model_and_summary = list(Allmodels = modellist,Allsummaries = summarylist)
if(onlymodel==T){
modellist
}
}
arbot = model_creator_simple_lm(data_boston,1,onlymodel = T)
length(arbot)
summary(arbot)
summary(arbot[1])
summary(arbot[[1]])
arbot
arbot[[1]]
names(arbot)
get_summary_model = function(givenmodel)
{
summarylist = list()
summarylistnames = list()
count = 1
for(i in 1:length(givenmodel))
{
summarylist[[count]] = summary(givenmodel[[count]])
summarylistnames[[count]] = paste(names(arbot)[count],"_summary",sep = "")
count = count + 1
}
names(summarylist) = summarylistnames
summarylist
}
summary_arbot = get_summary_model(arbot)
c("goat","potato")
arbit_model = model_creator_simple_lm(data_boston,1,onlymodel = T)
names(arbit_model)
library(MASS)
data_boston = Boston
names(Boston)
data_boston = na.fail(data_boston)
str(data_boston)
attach(data_boston)
model1 = lm(crim~zn)
model1_summary = summary(model1)
model1_summary$coefficients[,"Pr(>|t|)"][2]
model_creator_simple_lm = function (data_input,index,onlymodel = T)
{
# attaching the names of given dataframe
attach(data_input)
# Creating 4 lists ,for storing model,its names and summary,its names
modellist = list()
summarylist = list()
modellistnames = list()
summarylistnames = list()
# creating a newdata named dataframe without our column y and only has all other X's
newdata = data_input[,-index]
count = 1
# Starting the loop to record every model
for(i in 1:length(data_input[,-index]))
{
# temporary model for given y(known from index argument) and current X
tempmodel = lm(data_input[,index]~newdata[,count])
# Inserting that temp model in model list at its current count
# Similarliy inserting summaries to in another empty list created earlier
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
# Getting the names for model and summaries as well
# Inserting that current name based on count and using paste function to concentate strings
modellistnames[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarylistnames[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count=count+1
}
# Assigning the collected names from names list to the model's list
names(modellist) = modellistnames
names(summarylist) = summarylistnames
# Creating a final big list which will contain All models  and All summaries as well
# We have given Its name as Allmodels and Allsummaries to access them
Model_and_summary = list(Allmodels = modellist,Allsummaries = summarylist)
# Added another argument where we dont want summaries but only models lists
if(onlymodel==T)
{
modellist
}
else
{
Model_and_summary
}
}
get_summary_model = function(givenmodel)
{
summarylist = list()
summarylistnames = list()
count = 1
for(i in 1:length(givenmodel))
{
summarylist[[count]] = summary(givenmodel[[count]])
summarylistnames[[count]] = paste(names(arbot)[count],"_summary",sep = "")
count = count + 1
}
names(summarylist) = summarylistnames
summarylist
}
arbit_model = model_creator_simple_lm(data_boston,1,onlymodel = T)
names(arbit_model)
arbit_model["Allmodels"]
summary(arbit_model["Allmodels"][[1]][[1]])
summary_arbit_model = get_summary_model(arbit_model)
summary_arbit_model = get_summary_model(arbit_model)
get_summary_model = function(givenmodel)
{
summarylist = list()
summarylistnames = list()
count = 1
for(i in 1:length(givenmodel))
{
summarylist[[count]] = summary(givenmodel[[count]])
summarylistnames[[count]] = paste(names(givenmodel)[count],"_summary",sep = "")
count = count + 1
}
names(summarylist) = summarylistnames
summarylist
}
arbit_model = model_creator_simple_lm(data_boston,1,onlymodel = T)
names(arbit_model)
arbit_model["Allmodels"]
summary(arbit_model["Allmodels"][[1]][[1]])
summary_arbit_model = get_summary_model(arbit_model)
summary(arbit_model)
summary(arbit_model[1])
summary(arbit_model[[1]])
Boston
colnames(data_boston)
colnames(data_boston)[8]
library(MASS)
data_boston = Boston
names(Boston)
data_boston = na.fail(data_boston)
str(data_boston)
attach(data_boston)
model1 = lm(crim~zn)
model1_summary = summary(model1)
model1_summary$coefficients[,"Pr(>|t|)"][2]
model_creator_simple_lm = function (data_input,index,onlymodel = T)
{
# attaching the names of given dataframe
attach(data_input)
# Creating 4 lists ,for storing model,its names and summary,its names
modellist = list()
summarylist = list()
modellistnames = list()
summarylistnames = list()
# creating a newdata named dataframe without our column y and only has all other X's
newdata = data_input[,-index]
count = 1
# Starting the loop to record every model
for(i in 1:length(data_input[,-index]))
{
# temporary model for given y(known from index argument) and current X
#  tempmodel = lm(data_input[,index]~newdata[,count])
# Another way of creating a linear regression and in this we will get coefficient names correctly
tempmodel = lm(as.formula(  paste( colnames(data_input)[index],"~",colnames(newdata)[count],sep = "")  )  )
# Inserting that temp model in model list at its current count
# Similarliy inserting summaries to in another empty list created earlier
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
# Getting the names for model and summaries as well
# Inserting that current name based on count and using paste function to concentate strings
modellistnames[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarylistnames[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count=count+1
}
# Assigning the collected names from names list to the model's list
names(modellist) = modellistnames
names(summarylist) = summarylistnames
# Creating a final big list which will contain All models  and All summaries as well
# We have given Its name as Allmodels and Allsummaries to access them
Model_and_summary = list(Allmodels = modellist,Allsummaries = summarylist)
# Added another argument where we dont want summaries but only models lists
if(onlymodel==T)
{
modellist
}
else
{
Model_and_summary
}
}
get_summary_model = function(givenmodel)
{
summarylist = list()
summarylistnames = list()
count = 1
for(i in 1:length(givenmodel))
{
summarylist[[count]] = summary(givenmodel[[count]])
summarylistnames[[count]] = paste(names(givenmodel)[count],"_summary",sep = "")
count = count + 1
}
names(summarylist) = summarylistnames
summarylist
}
arbit_model = model_creator_simple_lm(data_boston,1,onlymodel = T)
names(arbit_model)
arbit_model["Allmodels"]
summary(arbit_model["Allmodels"][[1]][[1]])
summary_arbit_model = get_summary_model(arbit_model)
summary(arbit_model[[1]])
single_multi_model  = lm(crim~.,data = data_boston)
summary(single_multi_model)
keka = c("rar",2)
keka
c(keka,"ljdk")
summary_arbit_model
summary_arbit_model[1]
coef(summary_arbit_model[1])
coef(summary_arbit_model)
coef(summary_arbit_model[[1]])
coef(arbit_model[[1]])
coef(arbit_model[[1]])[2]
get_coefficients = function(givenmodel)
{
count= 1
coef_array = array()
for (i in 1:length(givenmodel))
{
coef_array[count]=coef(givenmodel[[count]])[2]
count = count+1
}
coef_array
}
arbit_coef_array = get_coefficients(arbit_model)
coef(arbit_model[[1]])[2]
names(coef(arbit_model[[1]])[2])
get_coefficients = function(givenmodel)
{
count= 1
coef_array = array()
for (i in 1:length(givenmodel))
{
coef_array[count]=coef(givenmodel[[count]])[2]
names(coef_array)[count] = names(coef(givenmodel[[count]])[2])
count = count+1
}
coef_array
}
arbit_coef_array = get_coefficients(arbit_model)
names(arbit_coef_array)
single_multi_coef_array = coef(single_multi_model)
names(single_multi_coef_array)
plot(arbit_coef_array,single_multi_coef_array[-1])
arbit_coef_array
single_multi_coef_array
single_multi_coef_array[-1]
length(data_boston)
model_creator_poly_lm = function(data_input,index,onlymodel = T,polydegree)
{
attach(data_input)
modellist = list()
summarylist = list()
modelnameslist = list()
summarynameslist = list()
newdata = data_input[,-index]
count = 1
for (i in 1:length(newdata))
{
tempmodel = lm( as.formula( paste(colnames(data_input)[index],"~","poly(",colnames(newdata)[count],",",polydegree,")" ,sep = "" ) ))
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
modelnameslist[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarynameslist[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count = count +1
}
names(modellist) = modelnameslist
names(summarylist) = summarynameslist
Model_and_summary = list(AllModels = modellist,AllSummaries = summarylist)
if (onlymodel == T)
{
modellist
}
else
{
Model_and_summary
}
}
poly_all_models = model_creator_poly_lm(data_boston,1,onlymodel = T,3)
str(Boston)
poly_all_models = model_creator_poly_lm(data_boston,1,onlymodel = T,3)
View(model_creator_simple_lm)
poly_all_models = model_creator_poly_lm(data_boston[,-chas],1,onlymodel = T,3)
data_boston[-chas]
data_boston[,-chas]
data_boston[,-3]
View(data_boston)
poly_all_models = model_creator_poly_lm(data_boston[,-4],1,onlymodel = T,3)
setwd("D:/Krishna Praveen/Coding/R/Intro_to_statistical_learning/Chapter_4")
<a id="ex01"></a>
>EXERCISE 1:
Let $Z=e^{\beta_0+\beta_1X}$,
Equation (4.2) becomes
__Step 1:__ $p(X) = \frac{Z}{1+Z}$
__Step 2:__ $\frac{1}{p(X)} = \frac{1+Z}{Z} = 1+\frac{1}{Z}$
__Step 3:__ $Z = \frac{1}{\frac{1}{p(X)}-1} = \frac{1}{\frac{1-p(X)}{p(X)}} = \frac{p(X)}{1-p(X)}$
__Step 3:__ $Z = \frac{1}{\frac{1}{p(X)}-1} = \frac{1}{\frac{1-p(X)}{p(X)}} = \frac{p(X)}{1-p(X)}$
__Step 3:__ $Z = \frac{1}{\frac{1}{p(X)}-1} = \frac{1}{\frac{1-p(X)}{p(X)}} = \frac{p(X)}{1-p(X)}$
__Step 3:__ $Z = \frac{1}{\frac{1}{p(X)}-1} = \frac{1}{\frac{1-p(X)}{p(X)}} = \frac{p(X)}{1-p(X)}$
__Step 3:__ $Z = \frac{1}{\frac{1}{p(X)}-1} = \frac{1}{\frac{1-p(X)}{p(X)}} = \frac{p(X)}{1-p(X)}$
plot(cars)
plot(cars)
plot(cars)
library(MASS)
library(ISLR)
Weekly
weekdata = Weekly
# Here we are going to use the ISLR package which has Weekly data
library(ISLR)
Weekly
# Weekly data is return of our stockmarket which is recorded weekly for 21 years from beginning of 1990 to 2010.
weekdata = Weekly
dim(weekdata)
# It has total 1089 rows and 9 columns
fix(weekdata)
summary(weekdata)
attach(weekdata)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
## a)
summary(weekdata)
?pairs
pairs(weekdata)
names(weekdata)
## b)
## using logistic regression to fit full data with all the five lag variables and volume too.
glm_model = glm(formula = Direction ~ .- Volume - Year - Today,data = weekdata,family = binomial)
glm_model
## b)
## using logistic regression to fit full data with all the five lag variables and volume too.
glm_model = glm(formula = Direction ~ . - Year - Today,data = weekdata,family = binomial)
glm_model
summary(glm_model)
## c)
# Plotting the confusion matrix using table function
glm_preds = predict(object = glm_model,newdata = weekdata,type = "response")
glm_preds
glm_preds = ifelse(glm_preds > 0.5,"Up","Down")
glm_preds
table(glm_preds,Direction)
# % of correct predictions are
mean(glm_preds == Direction)
430+54
names(weekdata)
Year
dim(weekdata)
YearUntil2008 = (Year <= 2008)
glmModelUntil2008 = glm(formula = Direction ~ Lag2,family = binomial,data = weekdata,subset = YearUntil2008)
glmModelUntil2008
# Creating or more like splitting existing weekdata for until 2008 and after 2008
weekdataUntil2008 = weekdata[YearUntil2008,]
DirectionUntil2008 = Direction[YearUntil2008]
length(DirectionUntil2008)
weekdataAfter2008 = weekdata[!YearUntil2008,]
DirectionAfter2008 = Direction[!YearUntil2008]
# Predicting for data apart from 2008
glmPredsAfter2008 = predict(object = glmModelUntil2008,newdata =weekdataAfter2008,type = "response" )
glmPredsAfter2008 = ifelse(glmPredsAfter2008 > 0.5, "Up","Down")
# Checking with table,
table(glmPredsAfter2008,DirectionAfter2008)
