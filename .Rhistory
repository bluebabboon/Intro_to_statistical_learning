plot(cylinders,mpg,col="red",varwidth = T)
?plot
?varwidth
??varwidth
?varwidth
?plot$varwidth
?plot.varwidth
?plot
plot(cylinders,mpg,col="red",
varwidth = T)                # Shrinks the boxes inside box plot respective to the variance
plot(cylinders,mpg,col="red",
varwidth=T,horizontal=T)
plot(cylinders,mpg,col="red",
varwidth=T,horizontal=T,
xlab="number of cylinder",
ylab="Miles per Gallon")
hist(mpg)
hist(Auto_data_csv$mpg)
hist(mpg)
hist(mpg,col = "red",breaks = 15)
hist(mpg,col = "red",breaks = 1)
hist(mpg,col = "red",breaks = 190)
hist(mpg,col = "red",breaks = 10)
hist(mpg,col = "red",breaks = 20)
hist(mpg,col = "red",breaks = 2000)
hist(mpg,col = "red",breaks = 200)
hist(mpg,col = "red",breaks = 50)
hist(mpg,col = "red",breaks = 25)
hist(mpg,col = "red",breaks = 20)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 20)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 25)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 50)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 10)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 19)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 20)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 25)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 27)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 25)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 20)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 24)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 28)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 29)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 30)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 4)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 5)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 9)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 10)           # we can add extra arguments as well,col="some color name",breaks=15
hist(mpg,col = "red",breaks = 15)           # we can add extra arguments as well,col="some color name",breaks=15
hist(cylinders)
hist(as.integer(cylinders))
typeof(cylinders)
hist(cylinders)
?pairs
pairs(Auto_data_csv)
pairs(~mpg+displacement+horsepower
+weight+acceleration,Auto_data_csv)
pairs(~mpg+displacement+horsepower
+weight+acceleration)
pairs(~mpg+displacement+horsepower
+weight+acceleration)
pairs(~mpg+displacement+horsepower
+weight+acceleration)
pairs(Auto_data_csv)                        # pairs(list or dataframe), Cool,isn't it?
pairs(~mpg+displacement+horsepower
+weight+acceleration)
plot(cylinders,mpg)
plot(horsepower,mpg)
identify(horsepower,mpg,name)
identify(horsepower,mpg,name)
plot(horsepower,mpg)
summary(Auto_data_csv)
summary(cylinders)
summary(horsepower)
?summary
savehistory()
getwd()
college_data=read.csv("data/College.csv",header = T)
college_data(5)
college_data[5]
college_data[2,5]
names(college_data)
fix(college_data)
?is.na
dim(college_data)
attach(college_data)
fix(college_data)                                              # Opens the data editor
college_data[1]
college_data[c(1,2),c(1,2)]
college_data[c(1,2),1:3]
colnames(college_data)
rownames(college_data)
rownames(college_data)=college_data[,1]
dim(college_data)
rownames(college_data)
college_data[1,1]
college_data["Abilene Christian University"]
college_data["Abilene Christian University"]
fix(college_data)                                              # Opens the data editor
getwd()
college_data=read.csv("data/College.csv",header = T)           # header is first row and we are specifying that it exists
names(college_data)                                            # to view the header,or feature names
fix(college_data)                                              # Opens the data editor
dim(college_data)                                              # Should give 777 observations and 19 features
attach(college_data)                                           # No need to type College_data$featurename, it loads feature names in to memory,so that we can just type it
college_data[c(1,2),1:3]
colnames(college_data)
rownames(college_data)
rownames(college_data)=college_data[,1]                        # Setting the row names for dataframe to first column of dataframe
dim(college_data)                                              # Giving row names will not change the dataframe dimension,it only gives names as pointers to observations
rownames(college_data)
college_data["Abilene Christian University"]
college_data["Abilene Christian University",]
college_data[1,]
fix(college_data)
college_data=college_data[,-1]
dim(college_data)
fix(college_data)
summary(college_data)
summary(college_data)
pairs(college_data)
pairs(college_data[,1:10])
plot(Outstate,Private,col="red")
plot(Private,Outstate,col="red")
plot(Private,Outstate,col="red",horizontal=T)
plot(Private,Outstate,col="red",horizontal=T,var=T)
plot(Private,Outstate,col="red",horizontal=T,varwidth=T)
plot(Private,Outstate,col="red",horizontal=T,varwidth=T)
plot(Private,Outstate,col="red",varwidth=T)
plot(Private,Outstate,col="red",varwidth=T)
plot(Private,col="red",varwidth=T)
plot(Private,col="red")
plot(Private,col="red")
plot(Outstate,Private,col="red")
plot(Private,Outstate,col="red")
plot(Private,Outstate,col="red",varwidth=T)
fix(college_data)
?rep
Elite= rep("No",nrow(college_data))
Elite
Elite
typeof(Elite)
dim(Elite)
Elite[Top10perc>50]
Elite[Top10perc>50]="Yes"
Elite
Elite = as.factor(Elite)
Elite
college_data=data.frame(college_data,Elite)
dim(college_data)
fix(college_data)
plot(mpg,cylinders)
########## Problem 9 ############
# This problem involves selecting Auto data
Auto_data=read.table("data/Auto.data",header = T,na.strings = "?")
# checking for overview of predictors
str(Auto_data)
names(Auto_data)
summary(Auto_data)
fix(Auto_data)
Auto_data=na.omit(Auto_data)
nrow(Auto_data)
attach(Auto_data)
for (i in names(Auto_data))
{
feature_name=Auto_data[[i]]
class_type = class(feature_name)
print(paste("Feature type for ",i,"is ",class_type))
}
for (i in names(Auto_data))
{
data_type=class(Auto_data[[i]])
if(data_type != "factor")
{
featurerange=range(Auto_data[,i])
print(paste("Range for ",i,"is ","from",featurerange[1],
"to",featurerange[2]))
}
}
for (i in names(Auto_data))
{
feature_name=Auto_data[[i]]
data_type = class(Auto_data[[i]])
if(data_type != "factor")
{
mean_feature=mean(feature_name)
sd_feature=sd(feature_name)
print(paste("Mean for ",i," is ",
round(mean_feature,3)))
print(paste("Standard deviation for ",i," is ",
round(sd_feature,3)))
}
}
Mean_sd_function = function(data_frame)
{
for (i in names(data_frame))
{
feature_name=data_frame[[i]]
data_type = class(data_frame[[i]])
if(data_type != "factor")
{
mean_feature=mean(feature_name)
sd_feature=sd(feature_name)
print(paste("Mean for",i," is ",
round(mean_feature,3)))
print(paste("Standard deviation for",i," is ",
round(sd_feature,3)))
}
}
}
Mean_sd_function(Auto_data)
New_Auto_data = Auto_data[-c(10:85),]
Mean_sd_function(New_Auto_data)
pairs(Auto_data)
pair_plotter_function = function(data_frame,x)
{
par(mfrow=c(3,3))
for (i in names(data_frame))
{
}
}
plot(mpg,cylinders)
plot(mpg,horsepower)
Auto_data$mpg
Auto_data[[mpg]]
Auto_data[["mpg"]]
Auto_data[["mpg"]]
names(Auto_data[["mpg"]])
as.character(horsepower)
as.numeric(horsepower)
plot(mpg,horsepower)
plot(mpg,horsepower,col=colors()[66])
plot(mpg,horsepower,col=colors()[200])
plot(mpg,horsepower,col=colors(distinct = T)[200])
plot(mpg,horsepower,col=colors(distinct = T)[40])
plot(mpg,horsepower,col=colors(distinct = T)[40],xlab = mpg)
names(Auto_data)
names(mpg)
?character
character(mpg)
"mpg"
mpg
integer()
?integer
?as.data.frame.character
deparse(substitute(mpg))
?substitute
?deparse
deparse(substitute(arbot))
pair_plotter_function(Auto_data,mpg)
pair_plotter_function(Auto_data,mpg)
pair_plotter_function(Auto_data,mpg)
pair_plotter_function(Auto_data,mpg)
plot(mpg,cylinders)
pair_plotter_function(Auto_data,mpg)
plot(mpg,cylinders)
plot(mpg,cylinders)
plot(mpg,cylinders)
plot(mpg,cylinders)
plot(mpg,cylinders)
plot(mpg,cylinders)
plot(mpg,cylinders)
plot(mpg,cylinders)
plot(mpg,cylinders)
plot(mpg,cylinders)
plot(mpg,cylinders,col="green")
plot(mpg,cylinders,col="red")
plot(mpg,cylinders,col=colors()[480])
plot(mpg,mpg,col=colors()[480])
pair_plotter_function(Auto_data,mpg)
pair_plotter_function(Auto_data,mpg)
pair_plotter_function(Auto_data,mpg)
{
color_inplot = colors(distinct = T)[count+20]
plot(x,data_frame[[i]],col=color_inplot)
count=count+1
}
count=0
for (i in names(data_frame))
{
color_inplot = colors(distinct = T)[count+20]
plot(x,data_frame[[i]],col=color_inplot)
count=count+1
}
count=0
for (i in names(Auto_data))
{
color_inplot = colors(distinct = T)[count+20]
plot(x,Auto_data[[i]],col=color_inplot)
count=count+1
}
count=0
for (i in names(Auto_data))
{
color_inplot = colors(distinct = T)[count+20]
plot(mpg,Auto_data[[i]],col=color_inplot)
count=count+1
}
{
color_inplot = colors(distinct = T)[count+20]
plot(mpg,Auto_data[[i]],col=color_inplot)
count=count+1
}
pair_plotter_function(Auto_data,mpg)
count=count+1
{
color_inplot = colors(distinct = T)[count+20]
plot(mpg,Auto_data[[i]],col=color_inplot)
count=count+1
}
count=0
for (i in names(Auto_data))
{
color_inplot = colors(distinct = T)[count+20]
plot(mpg,Auto_data[[i]],col=color_inplot)
count=count+1
}
count=0
for (i in names(Auto_data))
{
color_inplot = colors(distinct = T)[count+20]
plot(mpg,Auto_data[[i]],col=color_inplot)
count=count+1
}
count=0
for (i in names(Auto_data))
{
color_inplot = colors(distinct = T)[count+20]
plot(mpg,Auto_data[[i]],col=color_inplot)
count=count+1
}
par(mfrow=c(3,3))
count=0
for (i in names(Auto_data))
{
color_inplot = colors(distinct = T)[count+20]
plot(mpg,Auto_data[[i]],col=color_inplot)
count=count+1
}
count=0
somefunction(Auto_data,cylinders)
somefunction = function(dataframe,subframe){
for (i in names(dataframe))
{
color_inplot = colors(distinct = T)[count+20]
plot(subframe,dataframe[[i]],col=color_inplot)
count=count+1
}
}
somefunction(Auto_data,cylinders)
somefunction(Auto_data,horsepower)
pair_plotter_function(Auto_data,mpg)
pair_plotter_function(Auto_data,horsepower)
pair_plotter_function(Auto_data,horsepower)
names(Auto_data)
pair_plotter_function(Auto_data,weight)
par(mfrow=c(3,3))
pair_plotter_function(Auto_data,weight)
pair_plotter_function(Auto_data,acceleration)
somefunction(Auto_data,acceleration)
pair_plotter_function(Auto_data,acceleration)
pair_plotter_function(Auto_data,displacement)
somefunction(Auto_data,displacement)
par(mfrow=c(3,3))
count=0
pair_plotter_function(Auto_data,displacement)
pair_plotter_function = function(dataframe,subframe){
for (i in names(dataframe))
{
color_inplot = colors(distinct = T)[count+20]
plot(subframe,dataframe[[i]],col=color_inplot)
count=count+1
}
}
pair_plotter_function(Auto_data,displacement)
pair_plotter_function = function(dataframe,subframe){
count=0
for (i in names(dataframe))
{
color_inplot = colors(distinct = T)[count+20]
plot(subframe,dataframe[[i]],col=color_inplot)
count=count+1
}
}
pair_plotter_function(Auto_data,displacement)
par(mfrow=c(3,3))
pair_plotter_function = function(dataframe,subframe){
count=0
for (i in names(dataframe))
{
color_inplot = colors(distinct = T)[count+20]
plot(subframe,dataframe[[i]],col=color_inplot)
count=count+1
}
}
pair_plotter_function(Auto_data,displacement)
pair_plotter_function = function(dataframe,subframe){
count=0
par(mfrow=c(3,3))
for (i in names(dataframe))
{
color_inplot = colors(distinct = T)[count+20]
plot(subframe,dataframe[[i]],col=color_inplot)
count=count+1
}
}
pair_plotter_function(Auto_data,displacement)
pair_plotter_function = function(dataframe,subframe){
count=0
par(mfrow=c(3,3))
for (i in names(dataframe))
{
color_inplot = colors(distinct = T)[count+20]
plot(subframe,dataframe[[i]],col=color_inplot,
xlab = "test x label",ylab = "test y lab")
count=count+1
}
}
pair_plotter_function(Auto_data,displacement)
pair_plotter_function = function(dataframe,subframe){
count=0
par(mfrow=c(3,3))
for (i in names(dataframe))
{
color_inplot = colors(distinct = T)[count+20]
plot(subframe,dataframe[[i]],col=color_inplot,
xlab = deparse(substitute(i)))
count=count+1
}
}
pair_plotter_function(Auto_data,displacement)
deparse(substitute(mpg))
substitute(mpg)
deparse(mpg)
typeof(mpg)
mpg
pair_plotter_function = function(dataframe,subframe){
count=0
par(mfrow=c(3,3))
for (i in names(dataframe))
{
color_inplot = colors(distinct = T)[count+20]
plot(subframe,dataframe[[i]],col=color_inplot,
xlab = "test")
count=count+1
}
}
pair_plotter_function(Auto_data,displacement)
pair_plotter_function = function(dataframe,subframe){
count=0
par(mfrow=c(3,3))
for (i in names(dataframe))
{
color_inplot = colors(distinct = T)[count+20]
plot(subframe,dataframe[[i]],col=color_inplot,
xlab = deparse(substitute(subframe)),
ylab = i)
count=count+1
}
}
pair_plotter_function(Auto_data,displacement)
pair_plotter_function(Auto_data,mpg)
summary(mpg)
dim(Auto_data)
deparse(arbot)
arbot=c(1,2,3)
deparse(arbot)
substitute(arbot)
Range_function = function(data_frame)
for (i in names(data_frame))
{
data_type=class(data_frame[[i]])
if(data_type != "factor")
{
featurerange=range(data_frame[,i])
print(paste("Range for ",i,"is ","from",featurerange[1],
"to",featurerange[2]))
}
}
Range_function(Auto_data)
feature_type_function(Auto_data)
feature_type_function=function(data_frame)
for (i in names(data_frame))
{
feature_name=data_frame[[i]]
class_type = class(feature_name)
print(paste("Feature type for ",i,"is ",class_type))
}
feature_type_function(Auto_data)
print("blala",10)
print(paste("blala",10))
Range_function = function(data_frame)
for (i in names(data_frame))
{
data_type=class(data_frame[[i]])
if(data_type != "factor")                                           # Range will not work on factors ,so excluding that by if condition
{                                                                 # Also range returns a vector with two elements,min and max
featurerange=range(data_frame[,i])
print(paste("Range for ",i,"is ","from",featurerange[1],
"to",featurerange[2]))
}
}
Range_function(Auto_data)
substitute(mpg)
library(MASS)
boston_data=Boston
?Boston
names(boston_data)
str(boston_data)
summary(boston_data)
dim(boston_data)
fix(boston_data)
pairs(boston_data)
