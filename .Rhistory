arbit2=rbind(boston_data,arbit)
fix(arbit2)
boston_data[medv==min(medv),]
x
c(2,1:9)
pair_plotter_function(boston_data,crim)
names(boston_data)
mean(crim)
suburbs_more_crime=boston_data[,crim>mean(crim)]
suburbs_more_crime=boston_data[,crim > mean(crim)]
boston_data[,"crim"]
suburbs_more_crime = boston_data[,"crim" > mean(crim)]
View(suburbs_more_crime)
suburbs_more_crime = boston_data["crim" > mean(crim),]
View(suburbs_more_crime)
boston_data[crim > 5]
boston_data[crim > 5,]
arbot=boston_data[crim > 3]
arbot=boston_data[crim > 3,]
mean(crim)
suburbs_more_crime = boston_data["crim" > mean(crim),]
suburbs_more_crime = boston_data["crim" > mean("crim"),]
suburbs_more_crime = boston_data[crim > mean(crim),]
View(suburbs_more_crime)
row.names(suburbs_more_crime)
row.names(suburbs_more_crime)
range(crim)
View(suburbs_more_crime)
x
rowSums(z)
rowSums(x)
x[2,1]=NA
x
rowSums(is.na(x))
?with
with(mtcars,mpg[cyl==8 & disp > 350])
mpg
crim[]
crim[age > mean(age) & medv > mean(medv)]
crim[age > mean(age) & medv < mean(medv)]
suburbs_more_crime = boston_data[dis < mean(dis) & medv<mean(medv) & rm>mean(rm)]
suburbs_more_crime = boston_data[dis < mean(dis) & medv<mean(medv) & rm>mean(rm),]
View(suburbs_more_crime)
mean(suburbs_more_crime[crim,])
suburbs_more_crime[crim,]
suburbs_more_crime$crim
boston_data[,crim]
boston_data[,c(crim)]
boston_data[crim]
boston_data[crim,]
suburbs_more_crime = boston_data[dis < mean(dis) & medv<mean(medv) & rm>mean(rm),]
suburbs_more_crime[,crim]
suburbs_more_crime[,"crim"]
names(suburbs_more_crime)
suburbs_more_crime = subset(suburbs_more_crime,select = c("crim","medv","rm"))
View(suburbs_more_crime)
mean(suburbs_more_crime[crim,])
mean(suburbs_more_crime["crim",])
mean(suburbs_more_crime[,"crim"])
median(ptratio)
min(medv)
row.names(boston_data[,medv==min(medv)])
row.names(boston_data[medv==min(medv),])
row.names(boston_data[medv==min(medv),])                                                                    # Remember the syntax for selecting certain row based on given conditions in columns dataframe[dataframe$col1=="some value",]
boston_data["140",]
low_medv_rows=row.names(boston_data[medv==min(medv),])
low_medv_rows
typeof(low_medv_rows)
boston_data[low_medv_rows,]
str(boston_data)
morethan7rooms = boston_data[rm > 7,]
View(morethan7rooms)
mean(morethan7rooms)
mean(boston_data)
mean(morethan7rooms$crim)
View(morethan7rooms)
View(boston_data)
class(boston_data)
nrow(morethan7rooms)
range(morethan7rooms$rm)
morethan8rooms = boston_data[rm > 8,]
nrow(morethan8rooms)
View(morethan8rooms)
mean(morethan8rooms$crim)
library(MASS)
library(ISLR)
fix(Boston)
names(Boston)
?Boston
?lm
attach(Boston)
lm.fit=lm(medv~lstat)
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
lm.fit
str(lm.fit)
View(Boston)
confint(lm.fit)
predict(lm.fit,data.frame((lstat=c(5,10,15))),
interval = "confidence")
predict(lm.fit,data.frame((lstat=c(5,10,15))),
interval = "prediction")
plot(lstat,medv)
length(medv)
length(lstat)
View(Boston)
plot(Boston$lstat,medv)
abline(lm.fit)
plot(lstat,medv)
abline(lm.fit)
abline(lm.fit,lwd-3)
abline(lm.fit,lwd-3)
abline(lm.fit,lwd-3,col="red")
library(MASS)
library(ISLR)
library(MASS)
library(ISLR)
MASs
MASS
MASS
ISLR
library(ISLR)
MASS::wtloss
?Boston
pairs(Boston)
?lm
pairs(Boston)
summary(lm.fit)
summary(lm.fit)
summary(lm.fit())
summary(lm.fit)
summary(lm.fit)
lm.fit
lm.fit
medv
library(MASS)
library(ISLR)
?Boston
fix(Boston)
names(Boston)
attach(Boston)
?lm
summary(lm.fit)
lm_fitt=lm(medv~lstat)
names(lm.fit)
names(lm_fitt)
lm_fitt[,"coefficients"]
lm_fitt["coefficients"]
lm_fitt$coefficients
length(lm_fitt)
class(lm_fitt)
class(lm)
class(class(lm))
class(class(class(lm)))
?lm
class(lm)
pairs(Boston[,c(medv,lstat)])
pairs(Boston[,c("medv","lstat")])
plot(lstat,medv)
?Boston
names(lm_fit_model)
lm_fit_model=lm(medv~lstat)
names(lm_fit_model)
coef(lm.fit)
coef(lm_fit_model)
confint(lm_fit_model)
predict(lm_fit_model,data.frame((lstat=c(5,10,15))),
interval = "confidence")
predict(lm_fit_model,data.frame((lstat=c(5,10,15))),
interval = "prediction")
length(medv)
plot(lstat,medv)
plot(Boston$lstat,medv)
abline(lm.fit)
abline(lm_fit_model)
abline(lm_fit_model,lwd-3,col="red")
abline(lm_fit_model,lwd=30,col="red")
abline(lm_fit_model,lwd=10,col="red")
abline(lm_fit_model,lwd=5,col="red")
abline(lm_fit_model,lwd=5,col="red")
plot(Boston$lstat,medv)
abline(lm_fit_model)
abline(lm_fit_model,lwd=5,col="red")
summary(lm_fit_model)
?lm
class(lm_fit_model)
str(lm_fit_model)
summary(Boston)
lm_fit_model
lm_fit_model[4]
lm_fit_model[5]
lm_fit_model[6]
names(lm_fit_model)
summary(lm_fit_model)$sigma
summary(lm_fit_model)$r.sq
lm_fit_model["model"]
lm_fit_model["model"][1]
lm_fit_model["model"][2]
lm_fit_model["model"][3]
lm_fit_model["model"][5]
dim(lm_fit_model["model"])
lm_fit_model["qr"]
lm_fit_model["model"][5,1]
length(lm_fit_model["model"])
lm_fit_model["model"]$medv
class(lm_fit_model["model"])
lm_fit_model["model"][100]
lm_fit_model["model"][1]
lm_fit_model["model"][2]
lm_fit_model["model"][1]$medv
lm_fit_model["model"]$medv
names(lm_fit_model)
summary(lm_fit_model)
str(lm_fit_model)
plot(Boston$lstat,medv,col="red",pch="+")
library(MASS)
library(ISLR)
?Boston
fix(Boston)
names(Boston)
attach(Boston)
?lm
class(lm)
plot(lstat,medv)
plot(lstat,medv)
lm_fit_model=lm(medv~lstat)
class(lm_fit_model)                                                                # This gives class as lm,but it is a list though
summary(lm_fit_model)
str(lm_fit_model)
names(lm_fit_model)
coef(lm_fit_model)
confint(lm_fit_model)
predict(lm_fit_model,data.frame((lstat=c(5,10,15))),
interval = "confidence")
predict(lm_fit_model,data.frame((lstat=c(5,10,15))),
interval = "prediction")
plot(Boston$lstat,medv)
abline(lm_fit_model)
abline(lm_fit_model,lwd=5,col="red")
plot(Boston$lstat,medv,col="red",pch="+")
plot(1:20,1:20,pch=1:20)
plot(Boston$lstat,medv,col="red",pch=2)
plot(1:20,1:20,pch=1:20)
plot(Boston$lstat,medv,col="red",pch=20)
plot(Boston$lstat,medv,col="red",pch=5)
plot(1:20,1:20,pch=1:20)
plot(1:20,1,pch=1:20)
plot(1:20,1,pch=1:20)
plot(1:20,1:20,pch=1:20)
plot(1:20,1:1,pch=1:20)
plot(1:20,rep(1,20),pch=1:20)
plot(1:20,1:20,pch=1:20)
plot(1:20,1:20,pch=1:4)
plot(1:20,1:20,pch=1:20)
par(mfrow=c(2,2))
plot(lm_fit_model)
qqnorm(fitted.values(lm_fit_model))
qqnorm(rstudent(lm_fit_model))
plot(lm_fit_model)
par(mfrow=c(2,2))
plot(lm_fit_model)
predict(lm_fit_model)
b=predict(lm_fit_model)-fitted.values(lm_fit_model)
b
lm_fit_model
plot(predict(lm_fit_model),residuals(lm_fit_model))
plot(fitted.values(lm_fit_model),residuals(lm_fit_model))
plot(fitted.values(lm_fit_model),rstudent(lm_fit_model))
leverage
hatvalues(lm_fit_model)
?hatvalues
length(hatvalues)
length(hatvalues(lm_fit_model))
rm
?rm
arbot=Carseats
Price
attach(arbot)
Price:Age
medv:lstat
1:10
x=1:10
y=1:10
x:y
b=x:y
b
medv:b
medv:x
confint(lm_fit_model,level = 0.95)
plot(hatvalues(lm_fit_model))
which.max(hatvalues(lm_fit_model))
?which.max
?hatvalues
detach(Carseats)
lm_multi_model1=lm(medv~lstat+age,data=Boston)
summary(lm_multi_model1)
str(lm_multi_model1)
names(lm_multi_model1)
coef(lm_multi_model1)
confint(lm_multi_model1,level = 0.95)
hatvalues(lm_multi_model1)
which.max(hatvalues(lm_multi_model1))
plot(lm_multi_model1)
par(mfrow=c(2,2))
plot(lm_multi_model1)
par(mfrow=c(2,2))
plot(lm_fit_model)
summary(lm_multi_model1)
plot(hatvalues(lm_multi_model1))
summary(lm_multi_model1$age)
summary(lm_multi_model1)$age
summary(lm_multi_model1)$lstat
names(lm_multi_model1)
?summary.lm
summary(lm_multi_model1)$r.sq
summary(lm_multi_model1)$coefficients
summary(lm_multi_model1)$rank
summary(lm_multi_model1)$qr
?summary.lm
summary(lm_multi_model1)$r.squared
?summary.lm
summary(lm_multi_model1)$sigma
summary(lm_multi_model1)$coefficients
vif(lm_multi_model1)
library(car)
install.packages("car")
library(car)
vif(lm_multi_model1)
ncol(Boston)
dim(Boston)
lm_multi_model_all=lm(medv~.,data=Boston)
summary(lm_multi_model_all)
coef(lm_multi_model_all)
confint(lm_multi_model_all)
summary(lm_multi_model_all)$r.squared
summary(lm_multi_model_all)$sigma
deparse("rsdlfjslj")
as.name("lasjdflkajs")
substitute(";lsdjkflasjdf")
deparse(substitute("lkjdflasjdf"))
substitute(aslpiid)
par(mfrow=c(2,2))
plot(lm_multi_model_all)
plot(fitted.values(lm_multi_model_all),residuals(lm_multi_model_all))
plot(fitted.values(lm_multi_model_all),residuals(lm_multi_model_all),pch=15,col="green")
plot(fitted.values(lm_multi_model_all),residuals(lm_multi_model_all),pch=15,col="red")
plot(fitted.values(lm_multi_model_all),residuals(lm_multi_model_all),pch=10,col="red")
plot(fitted.values(lm_multi_model_all),residuals(lm_multi_model_all),pch=10,col="red")
hatvalues(lm_multi_model_all)
plot(hatvalues(lm_multi_model_all),residuals(lm_multi_model_all))
plot(hatvalues(lm_fit_model),rstudent(lm_fit_model))
plot(lm_fit_model)
plot(lm_fit_model)
plot(lm_fit_model)
plot(fitted.values(lm_multi_model_all),
rstudent(lm_multi_model_all))
vif(lm_multi_model_all)
vif(lm_multi_model1)
vif(lm_fit_model)
?vif
lm_multi_model_noage = lm(medv~.-age,data=Boston)
summary(lm_multi_model_noage)
summary(lm_multi_model_noage)$rsquared
summary(lm_multi_model_noage)$r.squared
summary(lm_multi_model_all)$r.squared
lm_multi_model=update(lm_multi_model,~lstat+age+indus)
lm_multi_model1=update(lm_multi_model1,~lstat+age+indus)
str(Boston)
lm_multi_interaction = lm(medv ~ lstat*age,data=Boston)
summary(lm_multi_interaction)
lm_nonlinear= lm(medv~lstat+I(lstat^2),data = Boston)
lm_nonlinear= lm(medv~lstat+I(lstat^2),data = Boston)
summary(lm_nonlinear)
anova(lm_fit_model,lm_nonlinear)
plot(lm_nonlinear)
par(mfrow=c(2,2))
plot(lm_nonlinear)
?I
?anova
?Anova
?poly
lm_nonlinear5th = lm(medv~poly(lstat,5),data=Boston)
summary(lm_nonlinear5th)
?tan
lm_nonlinear_log = lm(medv~log(lstat),data = Boston)
summary(lm_nonlinear_log)
cardata = Carseats
cardata
names(cardata)
dim(cardta)
dim(cardata)
str(cardata)
summary(cardata)
class(cardata)
fix(cardata)
attach(cardata)
lm_qualitative = lm(Sales ~ .+ Income:Advertising + Price:Age,data = cardata )
summary(lm_qualitative)
summary(lm_qualitative)
names(lm_qualitative)
df.residual(lm_qualitative)
dim(cardata)
coef(lm_qualitative)
confint(lm_qualitative,level = 0.97)
contrasts(lm_qualitative)
contrasts(ShelveLoc)
contrasts(Urban)
contrasts(US)
?contrasts
library(ISLR)
Autodata=Auto
names(Autodata)
str(Autodata)
summary(Autodata)
attach(Autodata)
model_mpghorse=lm(mpg~horsepower,data=Autodata)
summary(model_mpghorse)
coef(model_mpghorse)
confint(model_mpghorse)
names(model_mpghorse)
plot(model_mpghorse)
model_mpghorse[4]
?lm.fit
?lm
names(summary(model_mpghorse))
names(summary(lm_fit_model))
lm_fit_model=lm(medv~lstat)
class(lm_fit_model)                                                                       # This gives class as lm,but it is a list though
summary(lm_fit_model)
names(summary(lm_fit_model))
save.image("C:/Users/krishna/Desktop/random.RData")
load("C:/Users/krishna/Desktop/random.RData")
library(ISLR)
Autodata=Auto
names(Autodata)
str(Autodata)
summary(Autodata)
attach(Autodata)
model_mpghorse=lm(mpg~horsepower,data=Autodata)
summary(model_mpghorse)
coef(model_mpghorse)
confint(model_mpghorse)
names(model_mpghorse)
names(summary(model_mpghorse))
summary_data = summary(model_mpghorse)
summary_data["r.squared"]
summary_data[r.squared]
summary_data[r.squared]
summary_data["sigma"]
summary_data["coefficients"]
par(mfrow=c(2,2))
predict(model_mpghorse,98)
predict(model_mpghorse,dataframe=98)
predict(model_mpghorse,dataframe=c(98))
predict(model_mpghorse,data.frame=c(98))
?predict
predict(model_mpghorse,data.frame(c(98)))
predict(model_mpghorse,data.frame(c(98)),interval = "confidence")
predict(model_mpghorse,data.frame(horse=c(98)),interval = "confidence")
predict(model_mpghorse,data.frame(horsepower=c(98)),interval = "confidence")
horsepower
predict(model_mpghorse,data.frame(horsepower=c(98)),interval = "confidence")
arbot=c(98)
predict(model_mpghorse,data.frame(arbot),interval = "confidence")
predict(model_mpghorse,data.frame(horsepower=arbot),interval = "confidence")
arbit=data.frame("cuckoo":c(94,55,33),"lalala":c(83,22,1),"zozoz":c(2,33,44))
arbit
c(3,2,2)
?data.frame
arbit=data.frame("cuckoo"=c(94,55,33),"lalala"=c(83,22,1),"zozoz"=c(2,33,44))
arbit
?factor
substring("hidedidodadidoo",1:10,1:10)
substring("hidedidodadidoo",1:10)
substring("hidedidodadidoo",1:10,1:5)
substring("hidedidodadidoo",1:10,1:10)
substring("hidedidodadidoo",1:20,1:10)
substring("hidedidodadidoo",1:20,1:20)
arbot2=factor(c("high","low","low","medium"),levels = c("high","medium","low"),ordered = T)
arbot2
predict(model_mpghorse,data.frame(horsepower=c(98)),interval = "confidence")
predict(model_mpghorse,data.frame(horsepower=c(98)),interval = "prediction")
plot(horsepower,fitted.values(model_mpghorse),col="red",pch="+")
plot(horsepower,mpg,col="red",pch="+")
plot(horsepower,mpg,col="red",pch="+")
plot(horsepower,mpg,col="green",pch="+")
abline(model_mpghorse,col="red",lwd=5)
par(mfrow=c(2,2))
plot(model_mpghorse)
hatvalues(model_mpghorse)
which.max(hatvalues(model_mpghorse))
max(hatvalues(model_mpghorse))
library(cars)
library(car)
vif(model_mpghorse)
library(ISLR)
Autodata=Auto
pairs(Autodata)
attach(Autodata)
Autodata[,-c("names")]
class(Autodata)
names(Autodata)
Autodata[,-c("name")]
Autodata[,-"name"]
Autodata[,c("name","mpg")]
Autodata[,-c("name","mpg")]
Autodata[,-c(name,mpg)]
Autodata[,-c(name,mpg)]
Autodata[,c(name,mpg)]
Autodata[,-c(name,mpg)]
Autodata[,-c("name"=1)]
