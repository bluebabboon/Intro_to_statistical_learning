plot(model5)
2+2*0.1+0.3*0.8
0.5*0.1
rnorm(6)
list(a,b,c)
list(seq(1:5))
arbot = list(seq(1:5))
arbot[2]
arbot[1]
?vector
arbot = vector("list",5)
arbot
library(ISLR)
data_boston = Boston
library(MASS)
data_boston = Boston
names(Boston)
data_boston = na.fail(data_boston)
library(MASS)
data_boston = Boston
names(Boston)
data_boston = na.fail(data_boston)
View(data_boston)
str(data_boston)
library(MASS)
data_boston = Boston
names(Boston)
data_boston = na.fail(data_boston)
str(data_boston)
attach(data_boston)
model1 = lm(crim~zn)
model1_summary = summary(model1)
model1_summary$coefficients[,"Pr(>|t|)"][2]
model_creator_simple_lm = function (data_input,index){
# attaching the names of given dataframe
attach(data_input)
# Creating 4 lists ,for storing model,its names and summary,its names
modellist = list()
summarylist = list()
modellistnames = list()
summarylistnames = list()
# Starting the loop to record every model
for(i in names(data_input)){
}
}
arbot = c("a","b","c")
arbot2 = vector("list",length(arbot))
names(arbot2) = arbot
?lapply
arbot = c(1,3,44,5)
lapply(arbot,mean)
arbot = list(x=1:10,y=20:30,z=10:20)
lapply(arbot,lm())
lapply(arbot,lm
)
lapply(arbot,lm)
lapply(arbot,mean)
library(dplyr)
library(zoo)
install.packages("zoo")
library(ggvis)
install.packages(ggvis)
install.packages("ggvis")
library(caret)
install.packages("caret")
newdata = data_boston[,-1]
View(newdata)
names(data_boston[,-1])
length(data_boston[,-1])
paste("blal","dfljd",sep = "")
as.name("ldjfdlk")
substitute("ldkjfkd")
substitute(dkljfd)
paste("ldkf",3,"kdkd",sep = "")
arbot
paste(names(arbot)[2],"d")
names(arbot)
names(arbot)[0]
names(arbot)[1]
model_creator_simple_lm = function (data_input,index){
# attaching the names of given dataframe
attach(data_input)
# Creating 4 lists ,for storing model,its names and summary,its names
modellist = list()
summarylist = list()
modellistnames = list()
summarylistnames = list()
newdata = data_input[,-index]
count = 1
# Starting the loop to record every model
for(i in 1:length(data_input[,-index])){
tempmodel = lm(data_input[,index]~newdata[,count])
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
modellistnames[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarylistnames[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count=count+1
}
names(modellist) = modellistnames
names(summarylist) = summarylistnames
Model_and_summary = list(Allmodels = modellist,Allsummaries = summarylist)
}
model_creator_simple_lm(data_boston,1)
model_creator_simple_lm = function (data_input,index){
# attaching the names of given dataframe
attach(data_input)
# Creating 4 lists ,for storing model,its names and summary,its names
modellist = list()
summarylist = list()
modellistnames = list()
summarylistnames = list()
newdata = data_input[,-index]
count = 1
# Starting the loop to record every model
for(i in 1:length(data_input[,-index])){
tempmodel = lm(data_input[,index]~newdata[,count])
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
modellistnames[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarylistnames[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count=count+1
}
names(modellist) = modellistnames
names(summarylist) = summarylistnames
Model_and_summary = list(Allmodels = modellist,Allsummaries = summarylist)
Model_and_summary
}
model_creator_simple_lm(data_boston,1)
arbot = model_creator_simple_lm(data_boston,1)
names(arbot)
arbot["Allmodels"]
?lm
summary(arbot["Allmodels"]$zn_Model1)
summary(arbot["Allmodels"][1])
summary(arbot["Allmodels"][[1]])
summary(arbot["Allmodels"][[1]][[1]])
library(MASS)
data_boston = Boston
names(Boston)
data_boston = na.fail(data_boston)
str(data_boston)
attach(data_boston)
model1 = lm(crim~zn)
model1_summary = summary(model1)
model1_summary$coefficients[,"Pr(>|t|)"][2]
model_creator_simple_lm = function (data_input,index){
# attaching the names of given dataframe
attach(data_input)
# Creating 4 lists ,for storing model,its names and summary,its names
modellist = list()
summarylist = list()
modellistnames = list()
summarylistnames = list()
newdata = data_input[,-index]
count = 1
# Starting the loop to record every model
for(i in 1:length(data_input[,-index])){
tempmodel = lm(data_input[,index]~newdata[,count])
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
modellistnames[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarylistnames[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count=count+1
}
names(modellist) = modellistnames
names(summarylist) = summarylistnames
Model_and_summary = list(Allmodels = modellist,Allsummaries = summarylist)
Model_and_summary
}
library(MASS)
data_boston = Boston
names(Boston)
data_boston = na.fail(data_boston)
str(data_boston)
attach(data_boston)
model1 = lm(crim~zn)
model1_summary = summary(model1)
model1_summary$coefficients[,"Pr(>|t|)"][2]
model_creator_simple_lm = function (data_input,index){
# attaching the names of given dataframe
attach(data_input)
# Creating 4 lists ,for storing model,its names and summary,its names
modellist = list()
summarylist = list()
modellistnames = list()
summarylistnames = list()
newdata = data_input[,-index]
count = 1
# Starting the loop to record every model
for(i in 1:length(data_input[,-index])){
tempmodel = lm(data_input[,index]~newdata[,count])
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
modellistnames[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarylistnames[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count=count+1
}
names(modellist) = modellistnames
names(summarylist) = summarylistnames
Model_and_summary = list(Allmodels = modellist,Allsummaries = summarylist)
Model_and_summary
}
model_creator_simple_lm = function (data_input,index,onlymodel = T){
# attaching the names of given dataframe
attach(data_input)
# Creating 4 lists ,for storing model,its names and summary,its names
modellist = list()
summarylist = list()
modellistnames = list()
summarylistnames = list()
newdata = data_input[,-index]
count = 1
# Starting the loop to record every model
for(i in 1:length(data_input[,-index])){
tempmodel = lm(data_input[,index]~newdata[,count])
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
modellistnames[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarylistnames[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count=count+1
}
names(modellist) = modellistnames
names(summarylist) = summarylistnames
Model_and_summary = list(Allmodels = modellist,Allsummaries = summarylist)
if(onlymodel==T){
modellist
}
}
arbot = model_creator_simple_lm(data_boston,1,onlymodel = T)
length(arbot)
summary(arbot)
summary(arbot[1])
summary(arbot[[1]])
arbot
arbot[[1]]
names(arbot)
get_summary_model = function(givenmodel)
{
summarylist = list()
summarylistnames = list()
count = 1
for(i in 1:length(givenmodel))
{
summarylist[[count]] = summary(givenmodel[[count]])
summarylistnames[[count]] = paste(names(arbot)[count],"_summary",sep = "")
count = count + 1
}
names(summarylist) = summarylistnames
summarylist
}
summary_arbot = get_summary_model(arbot)
c("goat","potato")
arbit_model = model_creator_simple_lm(data_boston,1,onlymodel = T)
names(arbit_model)
library(MASS)
data_boston = Boston
names(Boston)
data_boston = na.fail(data_boston)
str(data_boston)
attach(data_boston)
model1 = lm(crim~zn)
model1_summary = summary(model1)
model1_summary$coefficients[,"Pr(>|t|)"][2]
model_creator_simple_lm = function (data_input,index,onlymodel = T)
{
# attaching the names of given dataframe
attach(data_input)
# Creating 4 lists ,for storing model,its names and summary,its names
modellist = list()
summarylist = list()
modellistnames = list()
summarylistnames = list()
# creating a newdata named dataframe without our column y and only has all other X's
newdata = data_input[,-index]
count = 1
# Starting the loop to record every model
for(i in 1:length(data_input[,-index]))
{
# temporary model for given y(known from index argument) and current X
tempmodel = lm(data_input[,index]~newdata[,count])
# Inserting that temp model in model list at its current count
# Similarliy inserting summaries to in another empty list created earlier
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
# Getting the names for model and summaries as well
# Inserting that current name based on count and using paste function to concentate strings
modellistnames[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarylistnames[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count=count+1
}
# Assigning the collected names from names list to the model's list
names(modellist) = modellistnames
names(summarylist) = summarylistnames
# Creating a final big list which will contain All models  and All summaries as well
# We have given Its name as Allmodels and Allsummaries to access them
Model_and_summary = list(Allmodels = modellist,Allsummaries = summarylist)
# Added another argument where we dont want summaries but only models lists
if(onlymodel==T)
{
modellist
}
else
{
Model_and_summary
}
}
get_summary_model = function(givenmodel)
{
summarylist = list()
summarylistnames = list()
count = 1
for(i in 1:length(givenmodel))
{
summarylist[[count]] = summary(givenmodel[[count]])
summarylistnames[[count]] = paste(names(arbot)[count],"_summary",sep = "")
count = count + 1
}
names(summarylist) = summarylistnames
summarylist
}
arbit_model = model_creator_simple_lm(data_boston,1,onlymodel = T)
names(arbit_model)
arbit_model["Allmodels"]
summary(arbit_model["Allmodels"][[1]][[1]])
summary_arbit_model = get_summary_model(arbit_model)
summary_arbit_model = get_summary_model(arbit_model)
get_summary_model = function(givenmodel)
{
summarylist = list()
summarylistnames = list()
count = 1
for(i in 1:length(givenmodel))
{
summarylist[[count]] = summary(givenmodel[[count]])
summarylistnames[[count]] = paste(names(givenmodel)[count],"_summary",sep = "")
count = count + 1
}
names(summarylist) = summarylistnames
summarylist
}
arbit_model = model_creator_simple_lm(data_boston,1,onlymodel = T)
names(arbit_model)
arbit_model["Allmodels"]
summary(arbit_model["Allmodels"][[1]][[1]])
summary_arbit_model = get_summary_model(arbit_model)
summary(arbit_model)
summary(arbit_model[1])
summary(arbit_model[[1]])
Boston
colnames(data_boston)
colnames(data_boston)[8]
library(MASS)
data_boston = Boston
names(Boston)
data_boston = na.fail(data_boston)
str(data_boston)
attach(data_boston)
model1 = lm(crim~zn)
model1_summary = summary(model1)
model1_summary$coefficients[,"Pr(>|t|)"][2]
model_creator_simple_lm = function (data_input,index,onlymodel = T)
{
# attaching the names of given dataframe
attach(data_input)
# Creating 4 lists ,for storing model,its names and summary,its names
modellist = list()
summarylist = list()
modellistnames = list()
summarylistnames = list()
# creating a newdata named dataframe without our column y and only has all other X's
newdata = data_input[,-index]
count = 1
# Starting the loop to record every model
for(i in 1:length(data_input[,-index]))
{
# temporary model for given y(known from index argument) and current X
#  tempmodel = lm(data_input[,index]~newdata[,count])
# Another way of creating a linear regression and in this we will get coefficient names correctly
tempmodel = lm(as.formula(  paste( colnames(data_input)[index],"~",colnames(newdata)[count],sep = "")  )  )
# Inserting that temp model in model list at its current count
# Similarliy inserting summaries to in another empty list created earlier
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
# Getting the names for model and summaries as well
# Inserting that current name based on count and using paste function to concentate strings
modellistnames[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarylistnames[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count=count+1
}
# Assigning the collected names from names list to the model's list
names(modellist) = modellistnames
names(summarylist) = summarylistnames
# Creating a final big list which will contain All models  and All summaries as well
# We have given Its name as Allmodels and Allsummaries to access them
Model_and_summary = list(Allmodels = modellist,Allsummaries = summarylist)
# Added another argument where we dont want summaries but only models lists
if(onlymodel==T)
{
modellist
}
else
{
Model_and_summary
}
}
get_summary_model = function(givenmodel)
{
summarylist = list()
summarylistnames = list()
count = 1
for(i in 1:length(givenmodel))
{
summarylist[[count]] = summary(givenmodel[[count]])
summarylistnames[[count]] = paste(names(givenmodel)[count],"_summary",sep = "")
count = count + 1
}
names(summarylist) = summarylistnames
summarylist
}
arbit_model = model_creator_simple_lm(data_boston,1,onlymodel = T)
names(arbit_model)
arbit_model["Allmodels"]
summary(arbit_model["Allmodels"][[1]][[1]])
summary_arbit_model = get_summary_model(arbit_model)
summary(arbit_model[[1]])
single_multi_model  = lm(crim~.,data = data_boston)
summary(single_multi_model)
keka = c("rar",2)
keka
c(keka,"ljdk")
summary_arbit_model
summary_arbit_model[1]
coef(summary_arbit_model[1])
coef(summary_arbit_model)
coef(summary_arbit_model[[1]])
coef(arbit_model[[1]])
coef(arbit_model[[1]])[2]
get_coefficients = function(givenmodel)
{
count= 1
coef_array = array()
for (i in 1:length(givenmodel))
{
coef_array[count]=coef(givenmodel[[count]])[2]
count = count+1
}
coef_array
}
arbit_coef_array = get_coefficients(arbit_model)
coef(arbit_model[[1]])[2]
names(coef(arbit_model[[1]])[2])
get_coefficients = function(givenmodel)
{
count= 1
coef_array = array()
for (i in 1:length(givenmodel))
{
coef_array[count]=coef(givenmodel[[count]])[2]
names(coef_array)[count] = names(coef(givenmodel[[count]])[2])
count = count+1
}
coef_array
}
arbit_coef_array = get_coefficients(arbit_model)
names(arbit_coef_array)
single_multi_coef_array = coef(single_multi_model)
names(single_multi_coef_array)
plot(arbit_coef_array,single_multi_coef_array[-1])
arbit_coef_array
single_multi_coef_array
single_multi_coef_array[-1]
length(data_boston)
model_creator_poly_lm = function(data_input,index,onlymodel = T,polydegree)
{
attach(data_input)
modellist = list()
summarylist = list()
modelnameslist = list()
summarynameslist = list()
newdata = data_input[,-index]
count = 1
for (i in 1:length(newdata))
{
tempmodel = lm( as.formula( paste(colnames(data_input)[index],"~","poly(",colnames(newdata)[count],",",polydegree,")" ,sep = "" ) ))
modellist[[count]] = tempmodel
summarylist[[count]] = summary(tempmodel)
modelnameslist[[count]] = paste(names(newdata)[count],"_Model",count,sep = "")
summarynameslist[[count]] = paste(names(newdata)[count],"_Summary",count,sep = "")
count = count +1
}
names(modellist) = modelnameslist
names(summarylist) = summarynameslist
Model_and_summary = list(AllModels = modellist,AllSummaries = summarylist)
if (onlymodel == T)
{
modellist
}
else
{
Model_and_summary
}
}
poly_all_models = model_creator_poly_lm(data_boston,1,onlymodel = T,3)
str(Boston)
poly_all_models = model_creator_poly_lm(data_boston,1,onlymodel = T,3)
View(model_creator_simple_lm)
poly_all_models = model_creator_poly_lm(data_boston[,-chas],1,onlymodel = T,3)
data_boston[-chas]
data_boston[,-chas]
data_boston[,-3]
View(data_boston)
poly_all_models = model_creator_poly_lm(data_boston[,-4],1,onlymodel = T,3)
